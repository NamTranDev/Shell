apply plugin: 'java-library'
apply plugin: 'kotlin'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly 'com.google.android:android:4.1.1.4'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.okio:okio:1.13.0'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkLocation =  properties.getProperty("sdk.dir")
def ndkLocation =  properties.getProperty("ndk.dir")

task ndkBuild(type:Exec, dependsOn: build, group: "shellserver") {
    commandLine "sh", "buildJni.sh", ndkLocation
    copy {
        from "src/main/libs/armeabi-v7a/shellserver"
        into "../pc"
    }
}

task buildDex(type: Exec, dependsOn: ndkBuild, group: 'shellserver'){
    def dxDirs = new File(sdkLocation,"build-tools")
            .list()
            .grep { it.matches("\\d+\\.\\d+\\.\\d+") }
            .sort()
            .reverse()
    def dxDir = dxDirs[0]
    executable sdkLocation+"/build-tools/"+dxDir+"/dx"
    println executable
    args "--dex", "--output=../pc/server.dex", "build/libs/server.jar"
}

task startServer(type: Exec, dependsOn: buildDex, group: 'shellserver'){
    environment 'PATH', System.getenv('PATH') + ":" + sdkLocation+"/platform-tools/"
    executable "../pc/pusher.sh"
}
